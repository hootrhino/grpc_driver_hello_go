// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sidecar

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SidecarClient is the client API for Sidecar service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SidecarClient interface {
	// 初始化, 主要是为了传配置进去
	Init(ctx context.Context, in *Config, opts ...grpc.CallOption) (*Response, error)
	// 启动
	Start(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// 获取状态
	Status(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// 读数据
	Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error)
	// 写数据
	Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error)
	// 停止
	Stop(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type sidecarClient struct {
	cc grpc.ClientConnInterface
}

func NewSidecarClient(cc grpc.ClientConnInterface) SidecarClient {
	return &sidecarClient{cc}
}

func (c *sidecarClient) Init(ctx context.Context, in *Config, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/sidecar.sidecar/Init", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sidecarClient) Start(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/sidecar.sidecar/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sidecarClient) Status(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/sidecar.sidecar/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sidecarClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error) {
	out := new(ReadResponse)
	err := c.cc.Invoke(ctx, "/sidecar.sidecar/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sidecarClient) Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error) {
	out := new(WriteResponse)
	err := c.cc.Invoke(ctx, "/sidecar.sidecar/Write", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sidecarClient) Stop(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/sidecar.sidecar/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SidecarServer is the server API for Sidecar service.
// All implementations must embed UnimplementedSidecarServer
// for forward compatibility
type SidecarServer interface {
	// 初始化, 主要是为了传配置进去
	Init(context.Context, *Config) (*Response, error)
	// 启动
	Start(context.Context, *Request) (*Response, error)
	// 获取状态
	Status(context.Context, *Request) (*Response, error)
	// 读数据
	Read(context.Context, *ReadRequest) (*ReadResponse, error)
	// 写数据
	Write(context.Context, *WriteRequest) (*WriteResponse, error)
	// 停止
	Stop(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedSidecarServer()
}

// UnimplementedSidecarServer must be embedded to have forward compatible implementations.
type UnimplementedSidecarServer struct {
}

func (UnimplementedSidecarServer) Init(context.Context, *Config) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (UnimplementedSidecarServer) Start(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedSidecarServer) Status(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedSidecarServer) Read(context.Context, *ReadRequest) (*ReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedSidecarServer) Write(context.Context, *WriteRequest) (*WriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (UnimplementedSidecarServer) Stop(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedSidecarServer) mustEmbedUnimplementedSidecarServer() {}

// UnsafeSidecarServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SidecarServer will
// result in compilation errors.
type UnsafeSidecarServer interface {
	mustEmbedUnimplementedSidecarServer()
}

func RegisterSidecarServer(s grpc.ServiceRegistrar, srv SidecarServer) {
	s.RegisterService(&Sidecar_ServiceDesc, srv)
}

func _Sidecar_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Config)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SidecarServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sidecar.sidecar/Init",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SidecarServer).Init(ctx, req.(*Config))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sidecar_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SidecarServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sidecar.sidecar/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SidecarServer).Start(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sidecar_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SidecarServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sidecar.sidecar/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SidecarServer).Status(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sidecar_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SidecarServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sidecar.sidecar/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SidecarServer).Read(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sidecar_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SidecarServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sidecar.sidecar/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SidecarServer).Write(ctx, req.(*WriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sidecar_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SidecarServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sidecar.sidecar/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SidecarServer).Stop(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// Sidecar_ServiceDesc is the grpc.ServiceDesc for Sidecar service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sidecar_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sidecar.sidecar",
	HandlerType: (*SidecarServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Init",
			Handler:    _Sidecar_Init_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _Sidecar_Start_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _Sidecar_Status_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _Sidecar_Read_Handler,
		},
		{
			MethodName: "Write",
			Handler:    _Sidecar_Write_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Sidecar_Stop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sidecar.proto",
}
